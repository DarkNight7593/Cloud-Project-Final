org: juanrodo
service: api-usuario

plugins:
  - serverless-auto-swagger

provider:
  name: aws
  runtime: python3.12
  memorySize: 1024
  timeout: 60
  iam:
    role: arn:aws:iam::752087942362:role/LabRole
  environment:
    TABLE_USER: ${sls:stage}-t_usuario
    TABLE_TOKEN: ${sls:stage}-t_token
    TABLE_ORG: ${sls:stage}-t_org
    FUNCION_VALIDAR: api-usuario-${sls:stage}-validar

functions:
  crear:
    handler: Lambda_CrearUsuario.lambda_handler
    events:
      - http:
          path: /usuario/crear
          method: post
          cors: true

  login:
    handler: Lambda_LoginUsuario.lambda_handler
    events:
      - http:
          path: /usuario/login
          method: post
          cors: true

  logout:
    handler: Lambda_Logout.lambda_handler
    events:
      - http:
          path: /usuario/logout
          method: post
          cors: true

  validar:
    handler: Lambda_ValidarTokenAcceso.lambda_handler
    events:
      - http:
          path: /usuario/validar
          method: post
          cors: true

  listar:
    handler: Lambda_ListarUsuario.lambda_handler
    events:
      - http:
          path: /usuario/listar
          method: post
          cors: true

custom:
  autoswagger:
    type: httpApi
    generateSwaggerOnDeploy: true
    title: API de Usuarios
    description: Endpoints para autenticación y gestión de usuarios.
    basePath: /${sls:stage}
    swaggerPath: /swagger
    swaggerJsonPath: /swagger.json
    useStage: true
    models:
      CrearUsuarioRequest:
        type: object
        required: [tenant_id, dni, full_name, password, rol]
        properties:
          tenant_id: { type: string, description: ID del tenant }
          dni: { type: string, description: DNI del usuario }
          full_name: { type: string, description: Nombre completo }
          password: { type: string, description: Contraseña en texto plano }
          rol:
            type: string
            enum: [admin, instructor]
            description: Rol del usuario

      LoginRequest:
        type: object
        required: [tenant_id, dni, password, rol]
        properties:
          tenant_id: { type: string }
          dni: { type: string }
          password: { type: string }
          rol: { type: string }

      LoginResponse:
        type: object
        properties:
          message: { type: string }
          token: { type: string }
          expires_at: { type: string }

      LogoutRequest:
        type: object
        required: [tenant_id, token]
        properties:
          tenant_id: { type: string }
          token: { type: string }

      ValidarTokenRequest:
        type: object
        required: [tenant_id, token]
        properties:
          tenant_id: { type: string }
          token: { type: string }

      ValidarTokenResponse:
        type: object
        properties:
          message: { type: string }
          dni: { type: string }
          full_name: { type: string }
          rol: { type: string }
          expires_at: { type: string }

      ListarUsuarioRequest:
        type: object
        required: [tenant_id, rol]
        properties:
          tenant_id: { type: string }
          rol:
            type: string
            enum: [instructor, alumno]
          last_dni: { type: string }
          limit: { type: integer }

      ListarUsuarioResponse:
        type: object
        properties:
          usuarios:
            type: array
            items:
              type: object
              properties:
                dni: { type: string }
                full_name: { type: string }
                rol: { type: string }
          last_dni: { type: string }

resources:
  Resources:
    TablaUsuarios:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${sls:stage}-t_usuario
        AttributeDefinitions:
          - AttributeName: tenant_id_rol
            AttributeType: S
          - AttributeName: dni
            AttributeType: S
        KeySchema:
          - AttributeName: tenant_id_rol
            KeyType: HASH
          - AttributeName: dni
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST

    TablaTokens:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${sls:stage}-t_token
        AttributeDefinitions:
          - AttributeName: tenant_id
            AttributeType: S
          - AttributeName: token
            AttributeType: S
        KeySchema:
          - AttributeName: tenant_id
            KeyType: HASH
          - AttributeName: token
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
