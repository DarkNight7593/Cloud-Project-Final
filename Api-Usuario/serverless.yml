org: juanrodo
service: api-usuario

plugins:
  - serverless-aws-documentation

provider:
  name: aws
  runtime: python3.12
  memorySize: 1024
  timeout: 60
  iam:
    role: arn:aws:iam::752087942362:role/LabRole
  environment:
    TABLE_USER: ${sls:stage}-t_usuario
    TABLE_TOKEN: ${sls:stage}-t_token
    TABLE_ORG: ${sls:stage}-t_org
    FUNCION_VALIDAR: api-usuario-${sls:stage}-validar

functions:
  crear:
    handler: Lambda_CrearUsuario.lambda_handler
    events:
      - http:
          path: /usuario/crear
          method: post
          cors: true
          integration: lambda
          documentation:
            summary: Crear un nuevo usuario
            description: |
              Crea un nuevo usuario (admin o instructor) dentro de un tenant existente.
              Si el rol es "instructor", se requiere un token válido de un administrador.
            tags: [Usuario]
            requestModels:
              "application/json": CrearUsuarioRequest
            responseModels:
              "application/json": RespuestaGenerica

  login:
    handler: Lambda_LoginUsuario.lambda_handler
    events:
      - http:
          path: /usuario/login
          method: post
          cors: true
          integration: lambda
          documentation:
            summary: Iniciar sesión de usuario
            description: |
              Permite que un usuario existente inicie sesión.
              Retorna un token único válido por 1 hora si las credenciales son correctas.
            tags: [Usuario]
            requestModels:
              "application/json": LoginRequest
            responseModels:
              "application/json": LoginResponse

  logout:
    handler: Lambda_Logout.lambda_handler
    events:
      - http:
          path: /usuario/logout
          method: post
          cors: true
          integration: lambda
          documentation:
            summary: Cerrar sesión de usuario
            description: |
              Invalida el token de acceso de un usuario cerrando su sesión.
              El token debe estar en el body.
            tags: [Usuario]
            requestModels:
              "application/json": LogoutRequest
            responseModels:
              "application/json": RespuestaGenerica

  validar:
    handler: Lambda_ValidarTokenAcceso.lambda_handler
    events:
      - http:
          path: /usuario/validar
          method: post
          cors: true
          integration: lambda
          documentation:
            summary: Validar token de acceso
            description: |
              Verifica si un token de acceso es válido y aún no ha expirado.
              Devuelve datos del usuario si es válido.
            tags: [Usuario]
            requestModels:
              "application/json": ValidarTokenRequest
            responseModels:
              "application/json": ValidarTokenResponse

  listar:
    handler: Lambda_ListarUsuario.lambda_handler
    events:
      - http:
          path: /usuario/listar
          method: post
          cors: true
          integration: lambda
          documentation:
            summary: Listar usuarios por rol
            description: |
              Devuelve una lista de usuarios de un rol específico (instructor o alumno) dentro de un tenant.
              Solo un admin puede invocar esta función.
            tags: [Usuario]
            requestModels:
              "application/json": ListarUsuarioRequest
            responseModels:
              "application/json": ListarUsuarioResponse

custom:
  documentation:
    apiType: http
    models:
      - name: CrearUsuarioRequest
        contentType: "application/json"
        schema:
          type: object
          required: [tenant_id, dni, full_name, password, rol]
          properties:
            tenant_id: { type: string }
            dni: { type: string }
            full_name: { type: string }
            password: { type: string }
            rol:
              type: string
              enum: [admin, instructor]

      - name: LoginRequest
        contentType: "application/json"
        schema:
          type: object
          required: [tenant_id, dni, password, rol]
          properties:
            tenant_id: { type: string }
            dni: { type: string }
            password: { type: string }
            rol: { type: string }

      - name: LoginResponse
        contentType: "application/json"
        schema:
          type: object
          properties:
            message: { type: string }
            token: { type: string }
            expires_at: { type: string }

      - name: LogoutRequest
        contentType: "application/json"
        schema:
          type: object
          required: [tenant_id, token]
          properties:
            tenant_id: { type: string }
            token: { type: string }

      - name: ValidarTokenRequest
        contentType: "application/json"
        schema:
          type: object
          required: [tenant_id, token]
          properties:
            tenant_id: { type: string }
            token: { type: string }

      - name: ValidarTokenResponse
        contentType: "application/json"
        schema:
          type: object
          properties:
            message: { type: string }
            dni: { type: string }
            full_name: { type: string }
            rol: { type: string }
            expires_at: { type: string }

      - name: ListarUsuarioRequest
        contentType: "application/json"
        schema:
          type: object
          required: [tenant_id, rol]
          properties:
            tenant_id: { type: string }
            rol:
              type: string
              enum: [instructor, alumno]
            last_dni: { type: string }
            limit: { type: integer }

      - name: ListarUsuarioResponse
        contentType: "application/json"
        schema:
          type: object
          properties:
            usuarios:
              type: array
              items:
                type: object
                properties:
                  dni: { type: string }
                  full_name: { type: string }
                  rol: { type: string }
            last_dni: { type: string }

      - name: RespuestaGenerica
        contentType: "application/json"
        schema:
          type: object
          properties:
            message: { type: string }
            error: { type: string }

resources:
  Resources:
    TablaUsuarios:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${sls:stage}-t_usuario
        AttributeDefinitions:
          - AttributeName: tenant_id_rol
            AttributeType: S
          - AttributeName: dni
            AttributeType: S
        KeySchema:
          - AttributeName: tenant_id_rol
            KeyType: HASH
          - AttributeName: dni
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST

    TablaTokens:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${sls:stage}-t_token
        AttributeDefinitions:
          - AttributeName: tenant_id
            AttributeType: S
          - AttributeName: token
            AttributeType: S
        KeySchema:
          - AttributeName: tenant_id
            KeyType: HASH
          - AttributeName: token
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
