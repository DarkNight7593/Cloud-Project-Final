org: juanrodo
service: api-usuario

plugins:
  - serverless-openapi-documentation

provider:
  name: aws
  runtime: python3.12
  memorySize: 1024
  timeout: 60
  iam:
    role: arn:aws:iam::752087942362:role/LabRole
  environment:
    TABLE_USER: ${sls:stage}-t_usuario
    TABLE_TOKEN: ${sls:stage}-t_token
    FUNCION_VALIDAR: api-usuario-${sls:stage}-validar
    FUNCION_ORG: api-org-${sls:stage}-buscarorg

custom:
  documentation:
    version: 1.0.0
    title: API de Usuarios
    description: Endpoints para autenticación y gestión de usuarios
    models:
      - name: CrearUsuarioRequest
        contentType: application/json
        schema:
          type: object
          required: [tenant_id, dni, full_name, password, rol]
          properties:
            tenant_id: { type: string }
            dni: { type: string }
            full_name: { type: string }
            password: { type: string }
            rol:
              type: string
              enum: [admin, instructor]

      - name: LoginRequest
        contentType: application/json
        schema:
          type: object
          required: [tenant_id, dni, password, rol]
          properties:
            tenant_id: { type: string }
            dni: { type: string }
            password: { type: string }
            rol: { type: string }

      - name: LoginResponse
        contentType: application/json
        schema:
          type: object
          properties:
            message: { type: string }
            token: { type: string }
            expires_at: { type: string }

      - name: LogoutRequest
        contentType: application/json
        schema:
          type: object
          required: [tenant_id, token]
          properties:
            tenant_id: { type: string }
            token: { type: string }

      - name: ValidarTokenRequest
        contentType: application/json
        schema:
          type: object
          required: [tenant_id, token]
          properties:
            tenant_id: { type: string }
            token: { type: string }

      - name: ValidarTokenResponse
        contentType: application/json
        schema:
          type: object
          properties:
            message: { type: string }
            dni: { type: string }
            full_name: { type: string }
            rol: { type: string }
            expires_at: { type: string }

      - name: ListarUsuarioRequest
        contentType: application/json
        schema:
          type: object
          required: [tenant_id, rol]
          properties:
            tenant_id: { type: string }
            rol:
              type: string
              enum: [instructor, alumno]
            last_dni: { type: string }
            limit: { type: integer }

      - name: ListarUsuarioResponse
        contentType: application/json
        schema:
          type: object
          properties:
            usuarios:
              type: array
              items:
                type: object
                properties:
                  dni: { type: string }
                  full_name: { type: string }
                  rol: { type: string }
            last_dni: { type: string }

functions:
  crear:
    handler: Lambda_CrearUsuario.lambda_handler
    events:
      - http:
          path: /usuario/crear
          method: post
          cors: true
          documentation:
            summary: Crear usuario
            description: Registra un nuevo usuario (admin o instructor)
            requestBody:
              description: Datos del nuevo usuario
              required: true
            requestModels:
              'application/json': CrearUsuarioRequest
            methodResponses:
              - statusCode: 200
                responseBody:
                  description: Usuario creado correctamente

  login:
    handler: Lambda_LoginUsuario.lambda_handler
    events:
      - http:
          path: /usuario/login
          method: post
          cors: true
          documentation:
            summary: Login de usuario
            description: Inicia sesión con credenciales válidas
            requestBody:
              required: true
            requestModels:
              'application/json': LoginRequest
            methodResponses:
              - statusCode: 200
                responseModels:
                  'application/json': LoginResponse
              - statusCode: 401
                responseBody:
                  description: Credenciales inválidas

  logout:
    handler: Lambda_Logout.lambda_handler
    events:
      - http:
          path: /usuario/logout
          method: post
          cors: true
          documentation:
            summary: Logout usuario
            description: Cierra sesión y revoca el token
            requestBody:
              required: true
            requestModels:
              'application/json': LogoutRequest
            methodResponses:
              - statusCode: 200
                responseBody:
                  description: Sesión cerrada correctamente

  validar:
    handler: Lambda_ValidarTokenAcceso.lambda_handler
    events:
      - http:
          path: /usuario/validar
          method: post
          cors: true
          documentation:
            summary: Validar token
            description: Valida el token de acceso JWT
            requestBody:
              required: true
            requestModels:
              'application/json': ValidarTokenRequest
            methodResponses:
              - statusCode: 200
                responseModels:
                  'application/json': ValidarTokenResponse
              - statusCode: 403
                responseBody:
                  description: Token inválido

  listar:
    handler: Lambda_ListarUsuario.lambda_handler
    events:
      - http:
          path: /usuario/listar
          method: post
          cors: true
          documentation:
            summary: Listar usuarios
            description: Lista usuarios por rol (alumno o instructor)
            requestBody:
              required: true
            requestModels:
              'application/json': ListarUsuarioRequest
            methodResponses:
              - statusCode: 200
                responseModels:
                  'application/json': ListarUsuarioResponse

resources:
  Resources:
    TablaUsuarios:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${sls:stage}-t_usuario
        AttributeDefinitions:
          - AttributeName: tenant_id_rol
            AttributeType: S
          - AttributeName: dni
            AttributeType: S
        KeySchema:
          - AttributeName: tenant_id_rol
            KeyType: HASH
          - AttributeName: dni
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST

    TablaTokens:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${sls:stage}-t_token
        AttributeDefinitions:
          - AttributeName: tenant_id
            AttributeType: S
          - AttributeName: token
            AttributeType: S
        KeySchema:
          - AttributeName: tenant_id
            KeyType: HASH
          - AttributeName: token
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
