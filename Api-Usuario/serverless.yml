org: juanrodo
service: api-usuario

plugins:
  - serverless-openapi-documentation

provider:
  name: aws
  runtime: python3.12
  memorySize: 1024
  timeout: 60
  iam:
    role: arn:aws:iam::752087942362:role/LabRole
  environment:
    TABLE_USER: ${sls:stage}-t_usuario
    TABLE_TOKEN: ${sls:stage}-t_token
    FUNCION_VALIDAR: api-usuario-${sls:stage}-validar
    FUNCION_ORG: api-org-${sls:stage}-buscarorg

functions:
  crear:
    handler: Lambda_CrearUsuario.lambda_handler
    events:
      - http:
          path: /usuario/crear
          method: post
          cors: true

  login:
    handler: Lambda_LoginUsuario.lambda_handler
    events:
      - http:
          path: /usuario/login
          method: post
          cors: true

  logout:
    handler: Lambda_Logout.lambda_handler
    events:
      - http:
          path: /usuario/logout
          method: post
          cors: true

  validar:
    handler: Lambda_ValidarTokenAcceso.lambda_handler
    events:
      - http:
          path: /usuario/validar
          method: post
          cors: true

  listar:
    handler: Lambda_ListarUsuario.lambda_handler
    events:
      - http:
          path: /usuario/listar
          method: post
          cors: true

custom:
  documentation:
    openapiVersion: 3.0.3
    title: API de Usuarios
    version: 1.0.0
    description: Endpoints para autenticación y gestión de usuarios
    output: openapi.json

    models:
      - name: CrearUsuarioRequest
        contentType: application/json
        schema:
          type: object
          required: [tenant_id, dni, full_name, password, rol]
          properties:
            tenant_id: { type: string }
            dni: { type: string }
            full_name: { type: string }
            password: { type: string }
            rol:
              type: string
              enum: [admin, instructor]

      - name: LoginRequest
        contentType: application/json
        schema:
          type: object
          required: [tenant_id, dni, password, rol]
          properties:
            tenant_id: { type: string }
            dni: { type: string }
            password: { type: string }
            rol: { type: string }

      - name: LoginResponse
        contentType: application/json
        schema:
          type: object
          properties:
            message: { type: string }
            token: { type: string }
            expires_at: { type: string }

      - name: LogoutRequest
        contentType: application/json
        schema:
          type: object
          required: [tenant_id, token]
          properties:
            tenant_id: { type: string }
            token: { type: string }

      - name: ValidarTokenRequest
        contentType: application/json
        schema:
          type: object
          required: [tenant_id, token]
          properties:
            tenant_id: { type: string }
            token: { type: string }

      - name: ValidarTokenResponse
        contentType: application/json
        schema:
          type: object
          properties:
            message: { type: string }
            dni: { type: string }
            full_name: { type: string }
            rol: { type: string }
            expires_at: { type: string }

      - name: ListarUsuarioRequest
        contentType: application/json
        schema:
          type: object
          required: [tenant_id, rol]
          properties:
            tenant_id: { type: string }
            rol:
              type: string
              enum: [instructor, alumno]
            last_dni: { type: string }
            limit: { type: integer }

      - name: ListarUsuarioResponse
        contentType: application/json
        schema:
          type: object
          properties:
            usuarios:
              type: array
              items:
                type: object
                properties:
                  dni: { type: string }
                  full_name: { type: string }
                  rol: { type: string }
            last_dni: { type: string }

    paths:
      /usuario/crear:
        post:
          summary: Crear usuario
          description: Registra un nuevo usuario (admin o instructor)
          requestBody:
            required: true
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/CrearUsuarioRequest'
          responses:
            200:
              description: Usuario creado correctamente

      /usuario/login:
        post:
          summary: Login de usuario
          description: Inicia sesión con credenciales válidas
          requestBody:
            required: true
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/LoginRequest'
          responses:
            200:
              description: Login exitoso
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/LoginResponse'
            401:
              description: Credenciales inválidas

      /usuario/logout:
        post:
          summary: Logout usuario
          description: Cierra sesión y revoca el token
          requestBody:
            required: true
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/LogoutRequest'
          responses:
            200:
              description: Sesión cerrada correctamente

      /usuario/validar:
        post:
          summary: Validar token
          description: Valida el token de acceso JWT
          requestBody:
            required: true
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ValidarTokenRequest'
          responses:
            200:
              description: Token válido
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/ValidarTokenResponse'
            403:
              description: Token inválido

      /usuario/listar:
        post:
          summary: Listar usuarios
          description: Lista usuarios por rol (alumno o instructor)
          requestBody:
            required: true
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ListarUsuarioRequest'
          responses:
            200:
              description: Lista de usuarios
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/ListarUsuarioResponse'

resources:
  Resources:
    TablaUsuarios:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${sls:stage}-t_usuario
        AttributeDefinitions:
          - AttributeName: tenant_id_rol
            AttributeType: S
          - AttributeName: dni
            AttributeType: S
        KeySchema:
          - AttributeName: tenant_id_rol
            KeyType: HASH
          - AttributeName: dni
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST

    TablaTokens:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${sls:stage}-t_token
        AttributeDefinitions:
          - AttributeName: tenant_id
            AttributeType: S
          - AttributeName: token
            AttributeType: S
        KeySchema:
          - AttributeName: tenant_id
            KeyType: HASH
          - AttributeName: token
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST

