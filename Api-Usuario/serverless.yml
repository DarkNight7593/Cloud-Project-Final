org: juanrodo
service: api-usuario

plugins:
  - serverless-auto-swagger

provider:
  name: aws
  runtime: python3.12
  memorySize: 1024
  timeout: 60
  iam:
    role: arn:aws:iam::752087942362:role/LabRole
  environment:
    TABLE_USER: ${sls:stage}-t_usuario
    TABLE_TOKEN: ${sls:stage}-t_token
    TABLE_ORG: ${sls:stage}-t_org
    FUNCION_VALIDAR: api-usuario-${sls:stage}-validar

functions:
  crear:
    handler: Lambda_CrearUsuario.lambda_handler
    description: Crear un nuevo usuario (admin, instructor o alumno) en un tenant existente.
    events:
      - http:
          path: /usuario/crear
          method: post
          cors: true
          documentation:
            summary: Crear usuario
            description: |
              Crea un nuevo usuario dentro del sistema.
              Si el rol es "instructor", requiere validación del token de un admin.
            tags: [Usuario]
            requestBody:
              required: true
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/CrearUsuarioRequest'
            responses:
              200:
                description: Usuario creado exitosamente
              400:
                description: Datos incompletos o inválidos
              403:
                description: Token inválido o sin permiso
              409:
                description: Usuario ya existente

  login:
    handler: Lambda_LoginUsuario.lambda_handler
    description: Inicia sesión y retorna un token válido si las credenciales son correctas.
    events:
      - http:
          path: /usuario/login
          method: post
          cors: true
          documentation:
            summary: Login de usuario
            tags: [Usuario]
            requestBody:
              required: true
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/LoginRequest'
            responses:
              200:
                description: Login exitoso
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/LoginResponse'
              401:
                description: Credenciales inválidas

  logout:
    handler: Lambda_Logout.lambda_handler
    description: Invalida un token y cierra la sesión del usuario.
    events:
      - http:
          path: /usuario/logout
          method: post
          cors: true
          documentation:
            summary: Logout
            tags: [Usuario]
            requestBody:
              required: true
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/LogoutRequest'
            responses:
              200:
                description: Sesión cerrada exitosamente
              400:
                description: Token no válido

  validar:
    handler: Lambda_ValidarTokenAcceso.lambda_handler
    description: Verifica si un token JWT es válido y no ha expirado.
    events:
      - http:
          path: /usuario/validar
          method: post
          cors: true
          documentation:
            summary: Validar token
            tags: [Usuario]
            requestBody:
              required: true
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/ValidarTokenRequest'
            responses:
              200:
                description: Token válido
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/ValidarTokenResponse'
              401:
                description: Token inválido o expirado

  listar:
    handler: Lambda_ListarUsuario.lambda_handler
    description: Lista usuarios por rol (solo accesible por administradores).
    events:
      - http:
          path: /usuario/listar
          method: post
          cors: true
          documentation:
            summary: Listar usuarios
            tags: [Usuario]
            requestBody:
              required: true
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/ListarUsuarioRequest'
            responses:
              200:
                description: Lista de usuarios
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/ListarUsuarioResponse'
              403:
                description: Permiso denegado

custom:
  autoswagger:
    type: httpApi
    generateSwaggerOnDeploy: true
    title: API de Usuarios
    description: Endpoints para autenticación y gestión de usuarios.
    basePath: /${sls:stage}
    swaggerPath: /swagger
    swaggerJsonPath: /swagger.json
    useStage: true
    models:
      CrearUsuarioRequest:
        type: object
        required: [tenant_id, dni, full_name, password, rol]
        properties:
          tenant_id: { type: string, description: ID del tenant }
          dni: { type: string, description: DNI del usuario }
          full_name: { type: string, description: Nombre completo }
          password: { type: string, description: Contraseña en texto plano }
          rol:
            type: string
            enum: [admin, instructor]
            description: Rol del usuario

      LoginRequest:
        type: object
        required: [tenant_id, dni, password, rol]
        properties:
          tenant_id: { type: string }
          dni: { type: string }
          password: { type: string }
          rol: { type: string }

      LoginResponse:
        type: object
        properties:
          message: { type: string }
          token: { type: string }
          expires_at: { type: string }

      LogoutRequest:
        type: object
        required: [tenant_id, token]
        properties:
          tenant_id: { type: string }
          token: { type: string }

      ValidarTokenRequest:
        type: object
        required: [tenant_id, token]
        properties:
          tenant_id: { type: string }
          token: { type: string }

      ValidarTokenResponse:
        type: object
        properties:
          message: { type: string }
          dni: { type: string }
          full_name: { type: string }
          rol: { type: string }
          expires_at: { type: string }

      ListarUsuarioRequest:
        type: object
        required: [tenant_id, rol]
        properties:
          tenant_id: { type: string }
          rol:
            type: string
            enum: [instructor, alumno]
          last_dni: { type: string }
          limit: { type: integer }

      ListarUsuarioResponse:
        type: object
        properties:
          usuarios:
            type: array
            items:
              type: object
              properties:
                dni: { type: string }
                full_name: { type: string }
                rol: { type: string }
          last_dni: { type: string }

resources:
  Resources:
    TablaUsuarios:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${sls:stage}-t_usuario
        AttributeDefinitions:
          - AttributeName: tenant_id_rol
            AttributeType: S
          - AttributeName: dni
            AttributeType: S
        KeySchema:
          - AttributeName: tenant_id_rol
            KeyType: HASH
          - AttributeName: dni
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST

    TablaTokens:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${sls:stage}-t_token
        AttributeDefinitions:
          - AttributeName: tenant_id
            AttributeType: S
          - AttributeName: token
            AttributeType: S
        KeySchema:
          - AttributeName: tenant_id
            KeyType: HASH
          - AttributeName: token
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST

