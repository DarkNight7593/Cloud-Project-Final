org: juanrodo
service: api-compras

plugins:
  - serverless-auto-swagger

provider:
  name: aws
  runtime: nodejs22.x
  memorySize: 1024
  timeout: 60
  iam:
    role: arn:aws:iam::752087942362:role/LabRole
  environment:
    TABLE_CURSO: ${sls:stage}-t_curso
    TABLE_USUARIO: ${sls:stage}-t_usuario
    TABLE_COMPRAS: ${sls:stage}-t_compras
    FUNCION_VALIDAR: api-usuario-${sls:stage}-validar
    FUNCION_BUSCAR_CURSO: api-curso-${sls:stage}-obtenerCurso
    FUNCION_BUSCAR_HORARIO: api-horario-${sls:stage}-obtenerHorario

functions:
  comprarCurso:
    handler: Lambda_Comprar.handler
    description: >
      Registra una compra para un curso por parte de un alumno autenticado.
      Valida el token JWT, verifica que el curso y horario existan, y que no haya una compra previa del mismo curso.
    events:
      - http:
          path: /compra/comprar
          method: post
          cors: true
          documentation:
            summary: Registrar compra de curso
            description: |
              Permite al alumno registrar la compra de un curso.
              Se asegura de que el curso exista, el horario esté disponible, y que no exista una compra duplicada.
              En caso de inscripción, elimina una reserva previa del mismo curso si existe.
            tags: [Compras]
            requestBody:
              description: Datos requeridos para registrar la compra
              required: true
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/ComprarCursoRequest'
            responses:
              200:
                description: Compra registrada correctamente
              400:
                description: Faltan datos o estado inválido
              403:
                description: Token inválido o rol no autorizado
              404:
                description: Curso u horario no encontrado
              409:
                description: Ya existe una compra activa para este curso

  listarCompras:
    handler: Lambda_ListarCompras.handler
    description: >
      Lista las compras realizadas por un alumno autenticado, o por curso si es instructor o administrador.
      Permite paginar resultados y filtrar por estado.
    events:
      - http:
          path: /compra/listar
          method: get
          cors: true
          documentation:
            summary: Listar compras
            description: |
              Lista compras activas del usuario autenticado.
              Si el usuario es `alumno`, lista sus compras según el estado.
              Si es `instructor` o `admin`, lista todas las compras del curso.
              Soporta paginación por `curso_id` o `alumno_dni`.
            tags: [Compras]
            requestHeaders:
              - name: Authorization
                required: true
                description: Token JWT del usuario autenticado
            queryParams:
              - name: tenant_id
                required: true
                description: ID del tenant (obligatorio)
              - name: curso_id
                required: false
                description: ID del curso (necesario para instructores/admins)
              - name: estado
                required: false
                description: Estado de la compra: `reservado` o `inscrito`
              - name: limit
                required: false
                description: Número máximo de resultados por página
              - name: lastCursoId
                required: false
                description: Último `curso_id` para paginación (para alumnos)
              - name: lastAlumnoDni
                required: false
                description: Último `alumno_dni` para paginación (para instructores)
            responses:
              200:
                description: Lista de compras obtenida exitosamente
              400:
                description: Parámetros faltantes o inválidos
              403:
                description: Usuario no autorizado

  eliminarCompra:
    handler: Lambda_EliminarCompra.handler
    description: >
      Elimina una compra (estado `reservado` o `inscrito`) hecha por un alumno.
      Requiere validación del token y que el alumno sea el dueño de la compra.
    events:
      - http:
          path: /compra/eliminar
          method: delete
          cors: true
          documentation:
            summary: Eliminar compra
            description: |
              Permite eliminar una compra si el estado es `reservado` o `inscrito`.
              Solo los alumnos pueden ejecutar esta operación.
            tags: [Compras]
            requestBody:
              description: Información para identificar la compra a eliminar
              required: true
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/EliminarCompraRequest'
            responses:
              200:
                description: Compra eliminada correctamente
              403:
                description: Usuario no autorizado para eliminar la compra
              404:
                description: Compra no encontrada

custom:
  autoswagger:
    type: httpApi
    generateSwaggerOnDeploy: true
    title: API de Compras
    description: API para registrar, listar y eliminar compras de cursos por alumnos.
    basePath: /${sls:stage}
    swaggerPath: /swagger
    swaggerJsonPath: /swagger.json
    useStage: true
    models:
      ComprarCursoRequest:
        type: object
        required: [tenant_id, curso_id, horario_id, estado]
        properties:
          tenant_id:
            type: string
            description: ID único del tenant (organización)
          curso_id:
            type: string
            description: ID del curso que se desea comprar
          horario_id:
            type: string
            description: ID del horario seleccionado
          estado:
            type: string
            enum: [reservado, inscrito]
            description: Estado inicial de la compra (`reservado` o `inscrito`)
      EliminarCompraRequest:
        type: object
        required: [tenant_id, curso_id]
        properties:
          tenant_id:
            type: string
            description: ID del tenant (organización)
          curso_id:
            type: string
            description: ID del curso cuya compra se desea eliminar

resources:
  Resources:
    TablaCompras:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${sls:stage}-t_compras
        AttributeDefinitions:
          - AttributeName: tenant_id_dni_estado
            AttributeType: S
          - AttributeName: curso_id
            AttributeType: S
          - AttributeName: tenant_id_curso_id
            AttributeType: S
          - AttributeName: alumno_dni
            AttributeType: S
        KeySchema:
          - AttributeName: tenant_id_dni_estado
            KeyType: HASH
          - AttributeName: curso_id
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        GlobalSecondaryIndexes:
          - IndexName: tenant_curso_index
            KeySchema:
              - AttributeName: tenant_id_curso_id
                KeyType: HASH
              - AttributeName: alumno_dni
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

            
