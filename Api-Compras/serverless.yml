org: juanrodo
service: api-compras

plugins:
  - serverless-auto-swagger

provider:
  name: aws
  runtime: nodejs22.x
  memorySize: 1024
  timeout: 60
  iam:
    role: arn:aws:iam::752087942362:role/LabRole
  environment:
    TABLE_CURSO: ${sls:stage}-t_curso
    TABLE_USUARIO: ${sls:stage}-t_usuario
    TABLE_COMPRAS: ${sls:stage}-t_compras
    FUNCION_VALIDAR: api-usuario-${sls:stage}-validar
    FUNCION_BUSCAR_CURSO: api-curso-${sls:stage}-obtenerCurso
    FUNCION_BUSCAR_HORARIO: api-horario-${sls:stage}-obtenerHorario

functions:
  comprarCurso:
    handler: Lambda_Comprar.handler
    description: >
      Registra una compra para un curso por parte de un alumno autenticado.
      Valida el token JWT, verifica que el curso y horario existan, y que no haya una compra previa del mismo curso.
    events:
      - http:
          path: /compra/comprar
          method: post
          cors: true

  listarCompras:
    handler: Lambda_ListarCompras.handler
    description: >
      Lista las compras realizadas por un alumno autenticado, o por curso si es instructor o administrador.
      Permite paginar resultados y filtrar por estado.
    events:
      - http:
          path: /compra/listar
          method: get
          cors: true

  eliminarCompra:
    handler: Lambda_EliminarCompra.handler
    description: >
      Elimina una compra (estado `reservado` o `inscrito`) hecha por un alumno.
      Requiere validación del token y que el alumno sea el dueño de la compra.
    events:
      - http:
          path: /compra/eliminar
          method: delete
          cors: true

custom:
  autoswagger:
    type: httpApi
    generateSwaggerOnDeploy: true
    title: API de Compras
    description: API para registrar, listar y eliminar compras de cursos por alumnos.
    basePath: /${sls:stage}
    swaggerPath: /swagger
    swaggerJsonPath: /swagger.json
    useStage: true
    models:
      ComprarCursoRequest:
        type: object
        required: [tenant_id, curso_id, horario_id, estado]
        properties:
          tenant_id:
            type: string
            description: ID único del tenant (organización)
          curso_id:
            type: string
            description: ID del curso que se desea comprar
          horario_id:
            type: string
            description: ID del horario seleccionado
          estado:
            type: string
            enum: [reservado, inscrito]
            description: Estado inicial de la compra (`reservado` o `inscrito`)
      EliminarCompraRequest:
        type: object
        required: [tenant_id, curso_id]
        properties:
          tenant_id:
            type: string
            description: ID del tenant (organización)
          curso_id:
            type: string
            description: ID del curso cuya compra se desea eliminar

resources:
  Resources:
    TablaCompras:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${sls:stage}-t_compras
        AttributeDefinitions:
          - AttributeName: tenant_id_dni_estado
            AttributeType: S
          - AttributeName: curso_id
            AttributeType: S
          - AttributeName: tenant_id_curso_id
            AttributeType: S
          - AttributeName: alumno_dni
            AttributeType: S
        KeySchema:
          - AttributeName: tenant_id_dni_estado
            KeyType: HASH
          - AttributeName: curso_id
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        GlobalSecondaryIndexes:
          - IndexName: tenant_curso_index
            KeySchema:
              - AttributeName: tenant_id_curso_id
                KeyType: HASH
              - AttributeName: alumno_dni
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
